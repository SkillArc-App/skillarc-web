# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  pull_request:
    branches: ['main']

jobs:
  build-cypress-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - id: set-matrix
        run: echo "specs=$(node cypress/support/locateCypressSpecsToRun.js)" >> $GITHUB_OUTPUT
    outputs:
      specs: ${{ steps.set-matrix.outputs.specs }}
  type-check:
    runs-on:
      group: organization/Default

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Next Cache
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key:
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{
            hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - run: npm ci
      - run: npm run type-check

  lint:
    runs-on:
      group: organization/Default

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
  test:
    runs-on:
      group: organization/Default

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - run: npm ci
      - run: npm run test
  e2e:
    needs: [build-cypress-matrix]
    runs-on:
      group: organization/Default

    permissions: read-all

    strategy:
      fail-fast: false
      matrix:
        specs: ${{ fromJson(needs.build-cypress-matrix.outputs.specs) }}

    services:
      redis:
        image: 'redis:7.2.1-alpine'
        ports:
          - '127.0.0.1:6379:6379'
      postgres:
        image: postgres:15.3-alpine
        ports:
          - '5432:5432'
        env:
          POSTGRES_DB: dev
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      puppeteer:
        image: ghcr.io/skillarc-app/puppeteer:latest
        ports:
          - '127.0.0.1:3002:3002'
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GH_ACTION_PAT_TOKEN }}
      sidekiq:
        image: ghcr.io/skillarc-app/sidekiq:latest
        env:
          SLACK_GATEWAY_STRATEGY: 'fake'
          MOCK_AUTH: 'true'
          POSTGRES_HOST: 'postgres'
          POSTGRES_USER: 'postgres'
          POSTGRES_PASSWORD: 'postgres'
          POSTGRES_PORT: 5432
          REDIS_URL: 'redis://redis:6379'
          PUPPETEER_BASE_URL: 'http://puppeteer:3002'
          PUPPETEER_AUTH: 'efa0adda-3d57-4924-bba0-d00903b18404'
          DOCUMENT_GENERATION_STRATEGY: real
          DOCUMENT_STORAGE_STRATEGY: db_only
          DOCUMENT_STORAGE_KIND: postgres
          SMS_GATEWAY_STRATEGY: fake
          KLAVIYO_GATEWAY_STRATEGY: fake
          KLAVIYO_API_KEY: 'fake'
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GH_ACTION_PAT_TOKEN }}
      server:
        image: ghcr.io/skillarc-app/server:latest
        ports:
          - 3001:3001
        env:
          SLACK_GATEWAY_STRATEGY: 'fake'
          MOCK_AUTH: 'true'
          POSTGRES_HOST: 'postgres'
          POSTGRES_USER: 'postgres'
          POSTGRES_PASSWORD: 'postgres'
          POSTGRES_PORT: 5432
          REDIS_URL: 'redis://redis:6379'
          PUPPETEER_BASE_URL: 'http://puppeteer:3002'
          PUPPETEER_AUTH: 'efa0adda-3d57-4924-bba0-d00903b18404'
          DOCUMENT_GENERATION_STRATEGY: real
          DOCUMENT_STORAGE_STRATEGY: db_only
          DOCUMENT_STORAGE_KIND: postgres
          SMS_GATEWAY_STRATEGY: fake
          KLAVIYO_GATEWAY_STRATEGY: fake
          KLAVIYO_API_KEY: 'fake'
          CI: true
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GH_ACTION_PAT_TOKEN }}
    env:
      MOCK_AUTH: 'true'
      RAILS_ENV: test
      DATABASE_URL: 'postgres://rails:password@localhost:5432/rails_test'
      SLACK_GATEWAY_STRATEGY: fake
      NEXT_PUBLIC_MOCK_NEXT_AUTH: true
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_ENVIRONMENT_URL: https://www.ci.com
    steps:
      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2
        with:
          comment_on_pr: false
      - uses: actions/checkout@v4
      - name: Run database migration
        run: |
          docker ps
          container_name=$(docker ps --filter "ancestor=ghcr.io/skillarc-app/server:latest" --format "{{.Names}}" | head -n 1)
          echo "Container name: $container_name"
          docker exec "$container_name" bin/rails db:reset
      - name: Checkout Skillarc GH action
        uses: actions/checkout@v4
        with:
          repository: SkillArc-App/skillarc-ci-action
          ref: v0.1.4
          ssh-key: ${{ secrets.SKILLARC_CI_ACTION_ACCESS }}
          path: .github/actions/skillarc-ci-action
      - name: Run SkillArc GH action
        uses: ./.github/actions/skillarc-ci-action
        with:
          alert_threshold: 300
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTION_PAT_TOKEN }}
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - name: Install node dependencies
        run: npm ci
      - name: Build next
        run: npm run build
      - name: Run Cypress e2e tests
        uses: cypress-io/github-action@v6
        with:
          start: npm run start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          install: false
          record: false
          spec: ${{ matrix.specs }}
  e2e-complete:
    needs: [e2e]
    runs-on:
      group: organization/Default
    steps:
      - name: Checkout Skillarc GH action
        uses: actions/checkout@v4
