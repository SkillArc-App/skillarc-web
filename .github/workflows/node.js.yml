# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on:
      group: Default

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build
  lint:
    runs-on:
      group: Default

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
  test:
    runs-on:
      group: Default

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run test
  e2e:
    runs-on:
      group: Default
    services:
      redis:
        image: 'redis:7.2.1-alpine'
        ports:
          - '127.0.0.1:6379:6379'
      postgres:
        image: postgres:15.3-alpine
        ports:
          - '5432:5432'
        env:
          POSTGRES_DB: dev
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      server:
        image: ghcr.io/blocktrain-app/blocktrain-rails:latest
        ports:
          - 3001:3001
        env:
          SLACK_GATEWAY_STRATEGY: 'fake'
          MOCK_AUTH: 'true'
          POSTGRES_HOST: 'postgres'
          POSTGRES_USER: 'postgres'
          POSTGRES_PASSWORD: 'postgres'
          POSTGRES_PORT: 5432
          REDIS_URL: 'redis://redis:6379'
          KLAVIYO_API_KEY: 'fake'
        credentials:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    env:
      MOCK_AUTH: 'true'
      RAILS_ENV: test
      DATABASE_URL: 'postgres://rails:password@localhost:5432/rails_test'
      SLACK_GATEWAY_STRATEGY: fake
      NEXT_PUBLIC_MOCK_NEXT_AUTH: true
      NEXT_PUBLIC_API_URL: http://localhost:3001
    steps:
      - uses: actions/checkout@v3
      - run: |
          docker ps
          container_name=$(docker ps --filter "ancestor=ghcr.io/blocktrain-app/blocktrain-rails:latest" --format "{{.Names}}" | head -n 1)
          echo "Container name: $container_name"
          docker exec "$container_name" bin/rails db:reset
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - name: Run Client for E2E Tests
        run: npm run dev & sleep 5 && curl http://localhost:3000 -I
      - name: Run Cypress
        run: npm run cypress:run
