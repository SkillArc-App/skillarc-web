generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("sessions")
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           DateTime?                @map("email_verified")
  image                   String?
  first_name              String?
  last_name               String?
  zip_code                String?
  phone_number            String?
  onboarding_session_id   String?                  @unique
  user_type               user_type                @default(SEEKER)
  accounts                Account[]
  jobInteractions         JobInteraction[]
  onboardingSession       OnboardingSession?
  profile                 Profile?
  sessions                Session[]
  created_at              DateTime                 @default(now())
  updated_at              DateTime                 @updatedAt
  trainingProviderProfile TrainingProviderProfile?
  SeekerTrainingProvider  SeekerTrainingProvider[]
  userRoles               UserRoles[]
  recruiter               Recruiter[]

  @@map("users")
}

model Role {
  id         String      @id @default(uuid())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  userRoles  UserRoles[]

  @@map("roles")
}

model UserRoles {
  id         String   @id @default(uuid())
  user_id    String
  role_id    String
  user       User     @relation(fields: [user_id], references: [id])
  role       Role     @relation(fields: [role_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_roles")
}

model TempUser {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  email_verified        DateTime?
  image                 String?
  first_name            String?
  last_name             String?
  zip_code              String?
  phone_number          String?
  onboarding_session_id String?   @unique
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  @@map("temp_users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id                    String                  @id @default(uuid())
  user_id               String                  @unique
  bio                   String?
  image                 String?
  status                String?
  credentials           Credential[]
  desiredOutcomes       DesiredOutcomes[]
  educationExperiences  EducationExperience[]
  networkInterests      NetworkInterests[]
  otherExperiences      OtherExperience[]
  preferences           Preference?
  professionalInterests ProfessionalInterests[]
  user                  User                    @relation(fields: [user_id], references: [id])
  profileSkills         ProfileSkill[]
  profileCertifications ProfileCertification[]
  // skills is depreciated -> migrated to profileSkills
  skills                Skills[]
  stories               Story[]
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  // seekerTrainingProvider SeekerTrainingProvider[]
  reference             Reference[]
  applicants            Applicant[]
  personalExperience    PersonalExperience[]

  @@map("profiles")
}

model NetworkInterests {
  id         String   @id @default(uuid())
  profile_id String
  response   String
  profile    Profile  @relation(fields: [profile_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("network_interests")
}

model ProfessionalInterests {
  id         String   @id @default(uuid())
  profile_id String
  response   String
  profile    Profile  @relation(fields: [profile_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("professional_interests")
}

model DesiredOutcomes {
  id         String   @id @default(uuid())
  profile_id String
  response   String
  profile    Profile  @relation(fields: [profile_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("desired_outcomes")
}

model Credential {
  id              String        @id @default(uuid())
  organization_id String?
  name            String?
  profile_id      String
  issued_date     String?
  description     String?
  organization    Organization? @relation(fields: [organization_id], references: [id])
  profile         Profile       @relation(fields: [profile_id], references: [id])
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@map("credentials")
}

model OtherExperience {
  id                String        @id @default(uuid())
  organization_id   String?
  organization_name String?
  profile_id        String
  start_date        String?
  is_current        Boolean?
  end_date          String?
  description       String?
  position          String?
  organization      Organization? @relation(fields: [organization_id], references: [id])
  profile           Profile       @relation(fields: [profile_id], references: [id])
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@map("other_experiences")
}

model EducationExperience {
  id                String        @id @default(uuid())
  organization_id   String?
  organization_name String?
  profile_id        String
  title             String?
  activities        String?
  graduation_date   String?
  gpa               String?
  organization      Organization? @relation(fields: [organization_id], references: [id])
  profile           Profile       @relation(fields: [profile_id], references: [id])
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@map("education_experiences")
}

model PersonalExperience {
  id          String   @id @default(uuid())
  profile_id  String
  activity    String?
  start_date  String?
  end_date    String?
  description String?
  profile     Profile  @relation(fields: [profile_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("personal_experiences")
}

model Organization {
  id                   String                @id @default(uuid())
  name                 String
  image                String?
  credentials          Credential[]
  educationExperiences EducationExperience[]
  otherExperiences     OtherExperience[]
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt

  @@map("organizations")
}

model Preference {
  id                  String    @id @default(uuid())
  email_consent       DateTime?
  information_consent DateTime?
  profile_id          String    @unique
  profile             Profile   @relation(fields: [profile_id], references: [id])
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  @@map("preferences")
}

model OnboardingSession {
  id           String    @id @default(uuid())
  user_id      String    @unique
  started_at   DateTime
  completed_at DateTime?
  current_step String?
  responses    Json      @default("{}")
  user         User      @relation(fields: [user_id], references: [id])
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("onboarding_sessions")
}

model ProfileSkill {
  id              String      @id @default(uuid())
  master_skill_id String
  profile_id      String
  description     String?
  masterSkill     MasterSkill @relation(fields: [master_skill_id], references: [id])
  profile         Profile     @relation(fields: [profile_id], references: [id])
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  @@map("profile_skills")
}

// Skills is depreciated -> migrated to profileSkills
model Skills {
  id          String   @id @default(uuid())
  name        String?
  type        String?
  profile_id  String
  description String?
  profile     Profile  @relation(fields: [profile_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("skills")
}

model Story {
  id         String   @id @default(uuid())
  profile_id String
  prompt     String
  response   String
  profile    Profile  @relation(fields: [profile_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("stories")
}

model Job {
  id                           String                 @id @default(uuid())
  employer_id                  String
  benefits_description         String
  responsibilities_description String?
  employment_title             String
  location                     String
  employment_type              employment_type
  hide_job                     Boolean                @default(false)
  schedule                     String?
  work_days                    String?
  requirements_description     String?
  industry                     String[]
  careerPaths                  CareerPath[]
  desiredSkills                DesiredSkill[]
  desiredCertifications        DesiredCertification[]
  employer                     Employer               @relation(fields: [employer_id], references: [id])
  jobInteractions              JobInteraction[]
  jobPhotos                    JobPhoto[]
  learnedSkills                LearnedSkill[]
  testimonials                 Testimonial[]
  created_at                   DateTime               @default(now())
  updated_at                   DateTime               @updatedAt
  applicants                   Applicant[]
  jobTag                       JobTag[]

  @@map("jobs")
}

model JobInteraction {
  id              String   @id @default(uuid())
  job_id          String
  user_id         String
  has_viewed      Boolean? @default(false)
  percent_match   Int?
  intent_to_apply Boolean? @default(false)
  job             Job      @relation(fields: [job_id], references: [id])
  user            User     @relation(fields: [user_id], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("job_interactions")
}

model JobTag {
  id         String   @id @default(uuid())
  job_id     String
  tag_id     String
  job        Job      @relation(fields: [job_id], references: [id])
  tag        Tag      @relation(fields: [tag_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("job_tags")
}

model Tag {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  jobTag     JobTag[]

  @@map("tags")
}

model Applicant {
  id         String            @id @default(uuid())
  job_id     String
  profile_id String
  job        Job               @relation(fields: [job_id], references: [id])
  profile    Profile           @relation(fields: [profile_id], references: [id])
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  statuses   ApplicantStatus[]

  @@map("applicants")
}

model ApplicantStatus {
  id           String    @id @default(uuid())
  applicant_id String
  status       String
  applicant    Applicant @relation(fields: [applicant_id], references: [id])
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("applicant_statuses")
}

model Recruiter {
  id          String   @id @default(uuid())
  user_id     String
  employer_id String
  user        User     @relation(fields: [user_id], references: [id])
  employer    Employer @relation(fields: [employer_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("recruiters")
}

model JobPhoto {
  id         String   @id @default(uuid())
  photo_url  String
  job_id     String
  job        Job      @relation(fields: [job_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("job_photos")
}

model CareerPath {
  id          String   @id @default(uuid())
  title       String
  upper_limit String
  lower_limit String
  order       Int
  job_id      String
  job         Job      @relation(fields: [job_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("career_paths")
}

model Testimonial {
  id          String   @id @default(uuid())
  job_id      String
  name        String
  title       String
  testimonial String
  photo_url   String?
  job         Job      @relation(fields: [job_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("testimonials")
}

model LearnedSkill {
  id              String      @id @default(uuid())
  master_skill_id String
  job_id          String
  job             Job         @relation(fields: [job_id], references: [id])
  masterSkill     MasterSkill @relation(fields: [master_skill_id], references: [id])
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  @@map("learned_skills")
}

model DesiredSkill {
  id              String      @id @default(uuid())
  master_skill_id String
  job_id          String
  job             Job         @relation(fields: [job_id], references: [id])
  masterSkill     MasterSkill @relation(fields: [master_skill_id], references: [id])
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  @@map("desired_skills")
}

model Employer {
  id             String           @id @default(uuid())
  name           String
  location       String?
  bio            String
  logo_url       String?
  jobs           Job[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  recruiter      Recruiter[]
  EmployerInvite EmployerInvite[]

  @@map("employers")
}

model MasterSkill {
  id            String         @id @default(uuid())
  skill         String
  type          skill_type
  desiredSkills DesiredSkill[]
  learnedSkills LearnedSkill[]
  profileSkills ProfileSkill[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  programSkill  ProgramSkill[]

  @@map("master_skills")
}

model MasterCertification {
  id                    String                 @id @default(uuid())
  certification         String
  desiredCertifications DesiredCertification[]
  profileCertifications ProfileCertification[]
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt

  @@map("master_certifications")
}

model DesiredCertification {
  id                      String              @id @default(uuid())
  master_certification_id String
  job_id                  String
  job                     Job                 @relation(fields: [job_id], references: [id])
  masterCertification     MasterCertification @relation(fields: [master_certification_id], references: [id])
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt

  @@map("desired_certifications")
}

model ProfileCertification {
  id                      String              @id @default(uuid())
  master_certification_id String
  profile_id              String
  description             String?
  masterCertification     MasterCertification @relation(fields: [master_certification_id], references: [id])
  profile                 Profile             @relation(fields: [profile_id], references: [id])
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt

  @@map("profile_certifications")
}

model TrainingProvider {
  id                      String                    @id @default(uuid())
  name                    String
  description             String
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  program                 Program[]
  seekerInvite            SeekerInvite[]
  trainingProviderInvite  TrainingProviderInvite[]
  seekerTrainingProvider  SeekerTrainingProvider[]
  reference               Reference[]
  TrainingProviderProfile TrainingProviderProfile[]

  @@map("training_providers")
}

model Program {
  id                     String                   @id @default(uuid())
  name                   String
  description            String
  training_provider_id   String
  trainingProvider       TrainingProvider         @relation(fields: [training_provider_id], references: [id])
  programSkill           ProgramSkill[]
  seekerInvite           SeekerInvite[]
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  seekerTrainingProvider SeekerTrainingProvider[]

  @@map("programs")
}

model ProgramSkill {
  id         String      @id @default(uuid())
  program_id String
  skill_id   String
  program    Program     @relation(fields: [program_id], references: [id])
  skill      MasterSkill @relation(fields: [skill_id], references: [id])
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  @@map("program_skills")
}

model EmployerInvite {
  id          String    @id @default(uuid())
  email       String
  first_name  String
  last_name   String
  employer_id String
  used_at     DateTime?
  employer    Employer  @relation(fields: [employer_id], references: [id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("employer_invites")
}

model SeekerInvite {
  id                   String           @id @default(uuid())
  email                String
  first_name           String
  last_name            String
  program_id           String
  training_provider_id String
  used_at              DateTime?
  program              Program          @relation(fields: [program_id], references: [id])
  trainingProvider     TrainingProvider @relation(fields: [training_provider_id], references: [id])
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt

  @@map("seeker_invites")
}

model TrainingProviderInvite {
  id                   String           @id @default(uuid())
  email                String
  first_name           String
  last_name            String
  role_description     String
  training_provider_id String
  trainingProvider     TrainingProvider @relation(fields: [training_provider_id], references: [id])
  used_at              DateTime?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt

  @@map("training_provider_invites")
}

model SeekerTrainingProvider {
  id                                        String                                      @id @default(uuid())
  program_id                                String?
  training_provider_id                      String
  user_id                                   String
  program                                   Program?                                    @relation(fields: [program_id], references: [id])
  trainingProvider                          TrainingProvider                            @relation(fields: [training_provider_id], references: [id])
  user                                      User                                        @relation(fields: [user_id], references: [id])
  created_at                                DateTime                                    @default(now())
  updated_at                                DateTime                                    @updatedAt
  seeker_training_provider_program_statuses seeker_training_provider_program_statuses[]

  @@map("seeker_training_providers")
}

model seeker_training_provider_program_statuses {
  id                          String                 @id @default(uuid())
  seeker_training_provider_id String
  status                      String                 @default("enrolled")
  seekerTrainingProvider      SeekerTrainingProvider @relation(fields: [seeker_training_provider_id], references: [id])
  created_at                  DateTime               @default(now())
  updated_at                  DateTime               @updatedAt
}

model Reference {
  id                   String                  @id @default(uuid())
  author_profile_id    String
  reference_text       String
  seeker_profile_id    String
  training_provider_id String
  authorProfile        TrainingProviderProfile @relation(fields: [author_profile_id], references: [id])
  seekerProfile        Profile                 @relation(fields: [seeker_profile_id], references: [id])
  trainingProvider     TrainingProvider        @relation(fields: [training_provider_id], references: [id])
  created_at           DateTime                @default(now())
  updated_at           DateTime                @updatedAt

  @@map("seeker_references")
}

model TrainingProviderProfile {
  id                   String           @id @default(uuid())
  training_provider_id String
  user_id              String           @unique
  user                 User             @relation(fields: [user_id], references: [id])
  reference            Reference[]
  trainingProvider     TrainingProvider @relation(fields: [training_provider_id], references: [id])
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt

  @@map("training_provider_profiles")
}

enum employment_type {
  FULLTIME
  PARTTIME
}

enum skill_type {
  PERSONAL
  TECHNICAL
}

enum user_type {
  SEEKER
  TRAINING_PROVIDER
}
